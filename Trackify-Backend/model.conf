####################################
# Request Definition
####################################
# Defines what a request consists of.
# Here, a request has:
# - sub: the subject (user role)
# - obj: the resource being accessed (API route/path)
# - act: the action performed (HTTP method like get/post)
[request_definition]
r = sub, obj, act


####################################
# Policy Definition
####################################
# Defines the structure of a policy rule.
# Each policy contains:
# - sub: the role (or subject)
# - obj: the resource (API route/path)
# - act: the permitted action (HTTP method)
[policy_definition]
p = sub, obj, act


####################################
# Role Definition (RBAC)
####################################
# Defines the role inheritance relationship.
# g = _, _ means:
# - first parameter: user or role
# - second parameter: parent role it inherits permissions from
# Example: g(admin, user) means admin inherits user's permissions.
[role_definition]
g = _, _


####################################
# Policy Effect
####################################
# Defines how multiple policy rules are evaluated.
# 'some(where (p.eft == allow))' means:
# - If any matching policy rule allows access, grant permission.
[policy_effect]
e = some(where (p.eft == allow))


####################################
# Matchers (Access Logic)
####################################
# The core permission matching logic:
# - g(r.sub, p.sub): check if the subject (role) has the role defined in the policy
# - r.obj == p.obj: check if the requested resource matches the policy resource
# - r.act == p.act: check if the requested action matches the policy action
# Access is granted only if all three conditions are true.
[matchers]
m = g(r.sub, p.sub) && r.obj == p.obj && r.act == p.act
